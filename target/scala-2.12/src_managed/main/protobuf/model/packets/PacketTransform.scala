// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protobuf.model.packets



@SerialVersionUID(0L)
final case class PacketTransform(
    position: scala.Option[protobuf.model.packets.PacketPosition] = None,
    rotation: scala.Option[protobuf.model.packets.PacketRotation] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PacketTransform] with com.trueaccord.lenses.Updatable[PacketTransform] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (position.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(position.get.serializedSize) + position.get.serializedSize }
      if (rotation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rotation.get.serializedSize) + rotation.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      position.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rotation.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protobuf.model.packets.PacketTransform = {
      var __position = this.position
      var __rotation = this.rotation
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __position = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __position.getOrElse(protobuf.model.packets.PacketPosition.defaultInstance)))
          case 18 =>
            __rotation = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __rotation.getOrElse(protobuf.model.packets.PacketRotation.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      protobuf.model.packets.PacketTransform(
          position = __position,
          rotation = __rotation
      )
    }
    def getPosition: protobuf.model.packets.PacketPosition = position.getOrElse(protobuf.model.packets.PacketPosition.defaultInstance)
    def clearPosition: PacketTransform = copy(position = None)
    def withPosition(__v: protobuf.model.packets.PacketPosition): PacketTransform = copy(position = Some(__v))
    def getRotation: protobuf.model.packets.PacketRotation = rotation.getOrElse(protobuf.model.packets.PacketRotation.defaultInstance)
    def clearRotation: PacketTransform = copy(rotation = None)
    def withRotation(__v: protobuf.model.packets.PacketRotation): PacketTransform = copy(rotation = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => position.orNull
        case 2 => rotation.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => position.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => rotation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protobuf.model.packets.PacketTransform
}

object PacketTransform extends com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketTransform] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketTransform] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): protobuf.model.packets.PacketTransform = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    protobuf.model.packets.PacketTransform(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[protobuf.model.packets.PacketPosition]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[protobuf.model.packets.PacketRotation]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protobuf.model.packets.PacketTransform] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protobuf.model.packets.PacketTransform(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketPosition]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketRotation]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PacketsProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PacketsProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = protobuf.model.packets.PacketPosition
      case 2 => __out = protobuf.model.packets.PacketRotation
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protobuf.model.packets.PacketTransform(
  )
  implicit class PacketTransformLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketTransform]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, protobuf.model.packets.PacketTransform](_l) {
    def position: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketPosition] = field(_.getPosition)((c_, f_) => c_.copy(position = Some(f_)))
    def optionalPosition: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketPosition]] = field(_.position)((c_, f_) => c_.copy(position = f_))
    def rotation: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketRotation] = field(_.getRotation)((c_, f_) => c_.copy(rotation = Some(f_)))
    def optionalRotation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketRotation]] = field(_.rotation)((c_, f_) => c_.copy(rotation = f_))
  }
  final val POSITION_FIELD_NUMBER = 1
  final val ROTATION_FIELD_NUMBER = 2
}
