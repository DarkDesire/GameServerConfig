// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protobuf.model.packets



@SerialVersionUID(0L)
final case class PacketAvatar(
    avatarId: Int = 0,
    familyId: Int = 0,
    familyName: String = "",
    name: String = "",
    level: Int = 0,
    transform: scala.Option[protobuf.model.packets.PacketTransform] = None,
    animState: Int = 0,
    health: scala.Option[protobuf.model.packets.PacketHealth] = None,
    manna: scala.Option[protobuf.model.packets.PacketManna] = None,
    `type`: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PacketAvatar] with com.trueaccord.lenses.Updatable[PacketAvatar] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (avatarId != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, avatarId) }
      if (familyId != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, familyId) }
      if (familyName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, familyName) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, name) }
      if (level != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, level) }
      if (transform.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(transform.get.serializedSize) + transform.get.serializedSize }
      if (animState != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, animState) }
      if (health.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(health.get.serializedSize) + health.get.serializedSize }
      if (manna.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(manna.get.serializedSize) + manna.get.serializedSize }
      if (`type` != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(10, `type`) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = avatarId
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = familyId
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = familyName
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = level
        if (__v != 0) {
          _output__.writeInt32(5, __v)
        }
      };
      transform.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = animState
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
      health.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      manna.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = `type`
        if (__v != 0) {
          _output__.writeInt32(10, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protobuf.model.packets.PacketAvatar = {
      var __avatarId = this.avatarId
      var __familyId = this.familyId
      var __familyName = this.familyName
      var __name = this.name
      var __level = this.level
      var __transform = this.transform
      var __animState = this.animState
      var __health = this.health
      var __manna = this.manna
      var __type = this.`type`
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __avatarId = _input__.readInt32()
          case 16 =>
            __familyId = _input__.readInt32()
          case 26 =>
            __familyName = _input__.readString()
          case 34 =>
            __name = _input__.readString()
          case 40 =>
            __level = _input__.readInt32()
          case 50 =>
            __transform = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __transform.getOrElse(protobuf.model.packets.PacketTransform.defaultInstance)))
          case 56 =>
            __animState = _input__.readInt32()
          case 66 =>
            __health = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __health.getOrElse(protobuf.model.packets.PacketHealth.defaultInstance)))
          case 74 =>
            __manna = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __manna.getOrElse(protobuf.model.packets.PacketManna.defaultInstance)))
          case 80 =>
            __type = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      protobuf.model.packets.PacketAvatar(
          avatarId = __avatarId,
          familyId = __familyId,
          familyName = __familyName,
          name = __name,
          level = __level,
          transform = __transform,
          animState = __animState,
          health = __health,
          manna = __manna,
          `type` = __type
      )
    }
    def withAvatarId(__v: Int): PacketAvatar = copy(avatarId = __v)
    def withFamilyId(__v: Int): PacketAvatar = copy(familyId = __v)
    def withFamilyName(__v: String): PacketAvatar = copy(familyName = __v)
    def withName(__v: String): PacketAvatar = copy(name = __v)
    def withLevel(__v: Int): PacketAvatar = copy(level = __v)
    def getTransform: protobuf.model.packets.PacketTransform = transform.getOrElse(protobuf.model.packets.PacketTransform.defaultInstance)
    def clearTransform: PacketAvatar = copy(transform = None)
    def withTransform(__v: protobuf.model.packets.PacketTransform): PacketAvatar = copy(transform = Some(__v))
    def withAnimState(__v: Int): PacketAvatar = copy(animState = __v)
    def getHealth: protobuf.model.packets.PacketHealth = health.getOrElse(protobuf.model.packets.PacketHealth.defaultInstance)
    def clearHealth: PacketAvatar = copy(health = None)
    def withHealth(__v: protobuf.model.packets.PacketHealth): PacketAvatar = copy(health = Some(__v))
    def getManna: protobuf.model.packets.PacketManna = manna.getOrElse(protobuf.model.packets.PacketManna.defaultInstance)
    def clearManna: PacketAvatar = copy(manna = None)
    def withManna(__v: protobuf.model.packets.PacketManna): PacketAvatar = copy(manna = Some(__v))
    def withType(__v: Int): PacketAvatar = copy(`type` = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = avatarId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = familyId
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = familyName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = level
          if (__t != 0) __t else null
        }
        case 6 => transform.orNull
        case 7 => {
          val __t = animState
          if (__t != 0) __t else null
        }
        case 8 => health.orNull
        case 9 => manna.orNull
        case 10 => {
          val __t = `type`
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(avatarId)
        case 2 => _root_.scalapb.descriptors.PInt(familyId)
        case 3 => _root_.scalapb.descriptors.PString(familyName)
        case 4 => _root_.scalapb.descriptors.PString(name)
        case 5 => _root_.scalapb.descriptors.PInt(level)
        case 6 => transform.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PInt(animState)
        case 8 => health.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => manna.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PInt(`type`)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protobuf.model.packets.PacketAvatar
}

object PacketAvatar extends com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketAvatar] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketAvatar] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): protobuf.model.packets.PacketAvatar = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    protobuf.model.packets.PacketAvatar(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[protobuf.model.packets.PacketTransform]],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[protobuf.model.packets.PacketHealth]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[protobuf.model.packets.PacketManna]],
      __fieldsMap.getOrElse(__fields.get(9), 0).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protobuf.model.packets.PacketAvatar] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protobuf.model.packets.PacketAvatar(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketTransform]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketHealth]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketManna]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PacketsProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PacketsProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => __out = protobuf.model.packets.PacketTransform
      case 8 => __out = protobuf.model.packets.PacketHealth
      case 9 => __out = protobuf.model.packets.PacketManna
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protobuf.model.packets.PacketAvatar(
  )
  implicit class PacketAvatarLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketAvatar]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, protobuf.model.packets.PacketAvatar](_l) {
    def avatarId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.avatarId)((c_, f_) => c_.copy(avatarId = f_))
    def familyId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.familyId)((c_, f_) => c_.copy(familyId = f_))
    def familyName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.familyName)((c_, f_) => c_.copy(familyName = f_))
    def name: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def level: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.level)((c_, f_) => c_.copy(level = f_))
    def transform: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketTransform] = field(_.getTransform)((c_, f_) => c_.copy(transform = Some(f_)))
    def optionalTransform: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketTransform]] = field(_.transform)((c_, f_) => c_.copy(transform = f_))
    def animState: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.animState)((c_, f_) => c_.copy(animState = f_))
    def health: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketHealth] = field(_.getHealth)((c_, f_) => c_.copy(health = Some(f_)))
    def optionalHealth: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketHealth]] = field(_.health)((c_, f_) => c_.copy(health = f_))
    def manna: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketManna] = field(_.getManna)((c_, f_) => c_.copy(manna = Some(f_)))
    def optionalManna: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketManna]] = field(_.manna)((c_, f_) => c_.copy(manna = f_))
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val AVATARID_FIELD_NUMBER = 1
  final val FAMILYID_FIELD_NUMBER = 2
  final val FAMILYNAME_FIELD_NUMBER = 3
  final val NAME_FIELD_NUMBER = 4
  final val LEVEL_FIELD_NUMBER = 5
  final val TRANSFORM_FIELD_NUMBER = 6
  final val ANIMSTATE_FIELD_NUMBER = 7
  final val HEALTH_FIELD_NUMBER = 8
  final val MANNA_FIELD_NUMBER = 9
  final val TYPE_FIELD_NUMBER = 10
}
