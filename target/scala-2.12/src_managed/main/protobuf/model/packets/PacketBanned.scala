// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protobuf.model.packets



@SerialVersionUID(0L)
final case class PacketBanned(
    banTime: Int = 0,
    banDuration: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PacketBanned] with com.trueaccord.lenses.Updatable[PacketBanned] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (banTime != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, banTime) }
      if (banDuration != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, banDuration) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = banTime
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = banDuration
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protobuf.model.packets.PacketBanned = {
      var __banTime = this.banTime
      var __banDuration = this.banDuration
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __banTime = _input__.readInt32()
          case 16 =>
            __banDuration = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      protobuf.model.packets.PacketBanned(
          banTime = __banTime,
          banDuration = __banDuration
      )
    }
    def withBanTime(__v: Int): PacketBanned = copy(banTime = __v)
    def withBanDuration(__v: Int): PacketBanned = copy(banDuration = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = banTime
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = banDuration
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(banTime)
        case 2 => _root_.scalapb.descriptors.PInt(banDuration)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protobuf.model.packets.PacketBanned
}

object PacketBanned extends com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketBanned] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketBanned] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): protobuf.model.packets.PacketBanned = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    protobuf.model.packets.PacketBanned(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protobuf.model.packets.PacketBanned] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protobuf.model.packets.PacketBanned(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PacketsProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PacketsProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protobuf.model.packets.PacketBanned(
  )
  implicit class PacketBannedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketBanned]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, protobuf.model.packets.PacketBanned](_l) {
    def banTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.banTime)((c_, f_) => c_.copy(banTime = f_))
    def banDuration: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.banDuration)((c_, f_) => c_.copy(banDuration = f_))
  }
  final val BANTIME_FIELD_NUMBER = 1
  final val BANDURATION_FIELD_NUMBER = 2
}
