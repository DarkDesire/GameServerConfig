// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protobuf.model.packets



@SerialVersionUID(0L)
final case class PacketShoot(
    shootEndPosition: scala.Option[protobuf.model.packets.PacketPosition] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PacketShoot] with com.trueaccord.lenses.Updatable[PacketShoot] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (shootEndPosition.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(shootEndPosition.get.serializedSize) + shootEndPosition.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      shootEndPosition.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protobuf.model.packets.PacketShoot = {
      var __shootEndPosition = this.shootEndPosition
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __shootEndPosition = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __shootEndPosition.getOrElse(protobuf.model.packets.PacketPosition.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      protobuf.model.packets.PacketShoot(
          shootEndPosition = __shootEndPosition
      )
    }
    def getShootEndPosition: protobuf.model.packets.PacketPosition = shootEndPosition.getOrElse(protobuf.model.packets.PacketPosition.defaultInstance)
    def clearShootEndPosition: PacketShoot = copy(shootEndPosition = None)
    def withShootEndPosition(__v: protobuf.model.packets.PacketPosition): PacketShoot = copy(shootEndPosition = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => shootEndPosition.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => shootEndPosition.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protobuf.model.packets.PacketShoot
}

object PacketShoot extends com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketShoot] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketShoot] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): protobuf.model.packets.PacketShoot = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    protobuf.model.packets.PacketShoot(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[protobuf.model.packets.PacketPosition]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protobuf.model.packets.PacketShoot] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protobuf.model.packets.PacketShoot(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[protobuf.model.packets.PacketPosition]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PacketsProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PacketsProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = protobuf.model.packets.PacketPosition
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protobuf.model.packets.PacketShoot(
  )
  implicit class PacketShootLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketShoot]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, protobuf.model.packets.PacketShoot](_l) {
    def shootEndPosition: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketPosition] = field(_.getShootEndPosition)((c_, f_) => c_.copy(shootEndPosition = Some(f_)))
    def optionalShootEndPosition: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[protobuf.model.packets.PacketPosition]] = field(_.shootEndPosition)((c_, f_) => c_.copy(shootEndPosition = f_))
  }
  final val SHOOTENDPOSITION_FIELD_NUMBER = 1
}
