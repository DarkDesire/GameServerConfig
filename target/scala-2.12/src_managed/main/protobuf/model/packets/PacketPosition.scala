// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protobuf.model.packets



@SerialVersionUID(0L)
final case class PacketPosition(
    x: Float = 0.0f,
    y: Float = 0.0f,
    z: Float = 0.0f
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PacketPosition] with com.trueaccord.lenses.Updatable[PacketPosition] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (x != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, x) }
      if (y != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(2, y) }
      if (z != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, z) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = x
        if (__v != 0.0f) {
          _output__.writeFloat(1, __v)
        }
      };
      {
        val __v = y
        if (__v != 0.0f) {
          _output__.writeFloat(2, __v)
        }
      };
      {
        val __v = z
        if (__v != 0.0f) {
          _output__.writeFloat(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protobuf.model.packets.PacketPosition = {
      var __x = this.x
      var __y = this.y
      var __z = this.z
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 13 =>
            __x = _input__.readFloat()
          case 21 =>
            __y = _input__.readFloat()
          case 29 =>
            __z = _input__.readFloat()
          case tag => _input__.skipField(tag)
        }
      }
      protobuf.model.packets.PacketPosition(
          x = __x,
          y = __y,
          z = __z
      )
    }
    def withX(__v: Float): PacketPosition = copy(x = __v)
    def withY(__v: Float): PacketPosition = copy(y = __v)
    def withZ(__v: Float): PacketPosition = copy(z = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = x
          if (__t != 0.0f) __t else null
        }
        case 2 => {
          val __t = y
          if (__t != 0.0f) __t else null
        }
        case 3 => {
          val __t = z
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PFloat(x)
        case 2 => _root_.scalapb.descriptors.PFloat(y)
        case 3 => _root_.scalapb.descriptors.PFloat(z)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protobuf.model.packets.PacketPosition
}

object PacketPosition extends com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketPosition] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[protobuf.model.packets.PacketPosition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): protobuf.model.packets.PacketPosition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    protobuf.model.packets.PacketPosition(
      __fieldsMap.getOrElse(__fields.get(0), 0.0f).asInstanceOf[Float],
      __fieldsMap.getOrElse(__fields.get(1), 0.0f).asInstanceOf[Float],
      __fieldsMap.getOrElse(__fields.get(2), 0.0f).asInstanceOf[Float]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protobuf.model.packets.PacketPosition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      protobuf.model.packets.PacketPosition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PacketsProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PacketsProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protobuf.model.packets.PacketPosition(
  )
  implicit class PacketPositionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, protobuf.model.packets.PacketPosition]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, protobuf.model.packets.PacketPosition](_l) {
    def x: _root_.com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.x)((c_, f_) => c_.copy(x = f_))
    def y: _root_.com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.y)((c_, f_) => c_.copy(y = f_))
    def z: _root_.com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.z)((c_, f_) => c_.copy(z = f_))
  }
  final val X_FIELD_NUMBER = 1
  final val Y_FIELD_NUMBER = 2
  final val Z_FIELD_NUMBER = 3
}
